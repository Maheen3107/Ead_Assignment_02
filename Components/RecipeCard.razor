@using Assignment_02.Models
@inject RecipeService RecipeService
@inject NavigationManager NavigationManager

@if (recipe != null)
{
    <div class="recipe-card" @onclick="() => NavigateToDetails(recipe.Id)">
        <div class="recipe-image-container">
            <img src="@recipe.ImageUrl" alt="@recipe.Name" class="recipe-image" />
        </div>
        <div class="recipe-details">
            <h3 class="recipe-title">@recipe.Name</h3>
            <p class="recipe-description">@recipe.Description</p>
        </div>
        <div class="recipe-footer">
            <p><strong>Category:</strong> @recipe.Category</p>
        </div>
        <button @onclick="DeleteRecipe" class="delete-button">Delete</button>
    </div>
}
else
{
    <p>No recipe found.</p>
}

<style>
    .recipe-card {
        background-color: #ffffff; /* White background for contrast */
        border: 1px solid #e0e0e0; /* Lighter border for a cleaner look */
        border-radius: 12px; /* Rounded corners */
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* Subtle shadow for depth */
        margin: 20px;
        overflow: hidden;
        transition: transform 0.3s, box-shadow 0.3s; /* Smooth transitions */
        cursor: pointer;
        max-width: 300px; /* Limit card width */
    }

        .recipe-card:hover {
            transform: translateY(-5px); /* Lift effect on hover */
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2); /* Darker shadow on hover */
        }

    .recipe-image-container {
        height: 200px;
        overflow: hidden;
        border-bottom: 2px solid #28a745; /* Green line for a pop of color */
    }

    .recipe-image {
        width: 100%;
        height: 100%;
        object-fit: cover; /* Cover the container without distortion */
        transition: transform 0.3s; /* Smooth image transition */
    }

    .recipe-image-container:hover .recipe-image {
        transform: scale(1.05); /* Slight zoom on hover */
    }

    .recipe-details {
        padding: 15px;
    }

    .recipe-title {
        font-size: 1.4em; /* Adjust font size */
        margin: 0;
        color: #333; /* Dark gray for the title */
        font-weight: bold; /* Bold title */
    }

    .recipe-description {
        font-size: 0.9em; /* Smaller font size for description */
        color: #666; /* Medium gray for description */
        margin: 5px 0 15px; /* Space around description */
    }

    .recipe-footer {
        padding: 0 15px 15px;
        border-top: 1px solid #f0f0f0; /* Light top border */
        background-color: #f9f9f9; /* Soft footer background */
        font-size: 0.9em; /* Smaller font size */
        color: #555; /* Darker footer text */
    }

    .delete-button {
        background-color: #ff4d4d; /* Red background for delete button */
        color: white;
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.2s; /* Button transitions */
        display: block;
        margin: 15px auto;
        font-weight: bold; /* Bold text on button */
    }

        .delete-button:hover {
            background-color: #e60000; /* Darker red on hover */
            transform: scale(1.05); /* Slight scale on hover */
        }
</style>

@code {
    [Parameter]
    public Recipe recipe { get; set; }

    public void NavigateToDetails(int recipeId)
    {
        NavigationManager.NavigateTo($"/recipeDetails/{recipeId}");
    }

    [Parameter]
    public EventCallback<int> Delete { get; set; }

    private async Task DeleteRecipe(MouseEventArgs e)
    {
        await Delete.InvokeAsync(recipe.Id);
    }
}
