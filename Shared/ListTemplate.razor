@typeparam TItem
@using Microsoft.AspNetCore.Components
@using System.Collections.Generic

<link href="~/css/app.css" rel="stylesheet" />

<div class="@ContainerClass">
    @if (Items != null && Items.Any())
    {
        @foreach (var item in Items)
        {
            <div class="item">
                @ChildContent(item)
            </div>
        }
    }
    else
    {
        <p>No item found</p>
    }
</div>

<style>
  /* General container style */
.container {
    display: flex;
    flex-wrap: wrap;
}

/* List View Styles */
.list-container {
    display: flex;
    flex-direction: column; /* Stack items vertically */
}

.list-container .recipe-card {
    margin: 10px 0; /* Space between recipe cards */
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #f9f9f9;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

/* Grid View Styles */
.grid-container {
    display: flex;
    flex-wrap: wrap; /* Allow items to wrap to the next line */
}

.grid-container .recipe-card {
    flex: 1 1 calc(33.33% - 20px); /* 3 items per row with some margin */
    margin: 10px; /* Space around each recipe card */
    padding: 15px;
    border: 1px solid #ddd;
    border-radius: 5px;
    background-color: #f9f9f9;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s; /* Transition effect for hover */
}

.grid-container .recipe-card:hover {
    transform: translateY(-5px); /* Lift effect on hover */
}




</style>

@code {
    [Parameter]
    public RenderFragment<TItem> ChildContent { get; set; }

    [Parameter]
    public IEnumerable<TItem> Items { get; set; }

    [Parameter]
    public string ContainerClass { get; set; } = "list-view"; // Default to list view
}
